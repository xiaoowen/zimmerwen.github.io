<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ZimmerWen</title>
    <link>/posts/</link>
    <description>Recent content in Posts on ZimmerWen</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 26 Sep 2022 15:16:00 +0800</lastBuildDate><atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何开始开展技术优化</title>
      <link>/posts/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%BC%80%E5%B1%95%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8C%96%E5%B7%A5%E4%BD%9C/</link>
      <pubDate>Mon, 26 Sep 2022 15:16:00 +0800</pubDate>
      
      <guid>/posts/%E5%A6%82%E4%BD%95%E5%BC%80%E5%A7%8B%E5%BC%80%E5%B1%95%E6%8A%80%E6%9C%AF%E4%BC%98%E5%8C%96%E5%B7%A5%E4%BD%9C/</guid>
      <description>通常我们在说技术架构时，一般是指技术架构的演进，而技术架构的演进就是对现存技术体系的优化提升工作。所有的技术架构优化活动的根本目的都是降本提效、提升用户体验，所以我们讨论的问题可归结为如何做才能更接近我们架构活动的目的。
 不谋万世者，不足谋一时；不谋全局者，不足谋一域
 体系化的认知 在做任何技术优化工作的统筹规划之前，都建议对相关的知识有一个体系化的认知，包含业务、技术、管理等方方面面。建立认知体系必须是自上而下的，从框架开始搭建逻辑脉络，再自下而上的积累知识，填充血肉。
 看山是山，看水是水；看山不是山，看水不是水；看山还是山，看水还是水
 这几句话分别对应着三个境界：经验、方法、原理；但认知要多几层，可以大致上分为几个：
 信息，多数的信息是无价值的，只有少数有价值的信息才会变成经验 经验，看山是山，看水是水；只能通过别人教导或观察别人解决问题。换一个问题就无法自行解决 方法，看山不是山，看水不是水；开始寻找解决不同问题的方法 原理，看山还是山，看水还是水；看透山水的原理，只要是山，就可以用山的原理来解决问题。也就是已经建立方法论，可以针对已知的、未知的情况使用或创造新的方法 哲学，也就是常常听到的“智慧”、“思维”，它可以指导如何运用知识。具备这一层认知可以发现事物的本质，即就是事物遵循的原理、规则，再利用该原理相应的方法来解决问题 自我，指导会把知识用在何处，以及与外部环境产生的利害关系  我们常听到认知有差距，不同认知水平的人通常是无法交流的，要不对方无法理解你的意思，要不对方觉得你讲的太肤浅，所以我们要让参与的人有同样的认知水平。大多数人只能意识到高一层的认知，再高一层就会觉得很虚。虚还是实取决于能不能理解和利用起来解决实际的、现实的问题，随着认知的提高，渔也会变成鱼，高层次认知看低层次认知会有一种看“瞎子”的感觉，容易陷入“知识的诅咒”。
跨层次认知需要突破，同层次认知需要积累。积累不必然可以突破，但突破必须依靠积累。
事情的重要性 依据时间管理理论中的一个重要方法：四象限法则；所有的事情都分轻重缓急，我们需要有重点地把主要的精力和时间集中地放在那些重要但不紧急的工作上，这样可以做到未雨绸缪，防患未然。
 第一象限，这个象限的事情具有时间的紧迫性和影响的重要性，无法回避也不能拖延，必须要优先解决的特性。研发上的体现如线上服务的崩溃、付费注册等关键环节的异常等 第二象限，这类事情通常有很大的欺骗性。很多人有认为紧急的事情都是重要的这个误区，如打麻将三缺一等。所以要注意与第一象限的事情做区分 第三象限，这类事情大多都是琐碎的杂事，没有时间的紧迫性 第四象限，这个象限中的事情往往没有时间上的紧迫性，但是有很重大的影响，对于团队、个人、企业的发展及环境的建立与维护有重大意义的  在技术工作中，我们首先应当优先解决重要且紧急的处于第一象限的事情，这类事情关系着现有服务或流程的稳定性，如果这些事情都无法得到妥善的处理，那就没有处理处于其他象限的事情的必要了。
技术优化工作与正常的技术迭代工作有很大的不同，技术迭代工作更多的关注点在于需求的实现，但优化工作的关注点在于流程的改造、效率的提高、成本的减少。在技术优化工作中，我们应当从第四象限中重要但不紧急的事情中选择。这些事情很重要，且有充足的时间去准备、有充足的时间去做好，我们选择这类事情的原因是 它的回报是最大的。
风险的影响面 第二点需要注意的是风险的影响面，主要有三方面：
  对业务运行造成的不良影响，这个很好理解，指的就是在技术优化工作执行过程中对现有业务运行造成的影响，如付费功能的异常、注册用户数降低、页面PV降低了等等诸如此类的问题，更严重的可能直接影响了正常的运行，甚至数据的错误，这类影响往往是不可逆的，影响时非常严重的。
所以，在技术优化工作的前期规划中就要着重考虑这方面，制定消除或尽量避免该类影响的方案。
  对团队成员的不利影响，这个主要是管理上存在的一定风险，发生的概率私以为还是比较低的。大多数开发人员对新事物的接纳程度还是比较高的，可作为次要风险来考虑。
  对执行过程中的不确定的容错或兼容机制，技术实施过程中往往伴随着种种不确定性，我们在对优化工作的风险评估时还要增加对这些不确定性的容错或兼容机制是否充足的评判。
  合理性的评判 另外一个重中之重要考虑的就是对合理性的评判，包含技术的合理性与成本的合理性。
1. 技术合理性 技术的世界中没有最优化，只有最合适，技术始终以高效、稳定、安全为目标来衡量合理性。技术优化的本质就是解决复杂度带来的问题，复杂度表现为多种，如业务复杂度、性能复杂度、可用性可扩展复杂度、安全复杂度等，那如何评判技术的合理性：
  需求角度，这个角度又可以分为三个层次：
 能解决当下的需求与问题 能高效的完成需求，解决问题，即能优雅且可复用的方式解决当下所有的问题 前瞻性设计，在未来一段时间都可以以第二层次的方式满足需求，从而不会每次当业务进行演变时，导致天翻地覆的结构性变化    非需求角度，主要是对指标影响的评估，可主要分为以下几点：
 稳定性指标，即高可用 高效指标，即文档化、可扩展与复用性。设计时应该秉承着低耦合的理念去做，同时做好避免重复劳动的复用性设计 安全指标，执行过程中产生的数据或通信方式的安全性考虑，如加密、HTTPS等    2. 成本合理性 在做技术优化之前要考虑到优化工作的人力、时间成本，即要尽量做到人效的合理。</description>
    </item>
    
    <item>
      <title>Php 进程异常退出导致 502 的问题排查</title>
      <link>/posts/php-%E8%BF%9B%E7%A8%8B%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%AF%BC%E8%87%B4502%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</link>
      <pubDate>Mon, 25 Jul 2022 20:01:00 +0800</pubDate>
      
      <guid>/posts/php-%E8%BF%9B%E7%A8%8B%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%AF%BC%E8%87%B4502%E7%9A%84%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</guid>
      <description>502 是什么？
 The server, while acting as a gateway or proxy, received an invaild response from the upstream server it accessed in attempting to fulfill the request.
 从概念上来看：上游服务无响应导致 502，那什么是上游服务？以 LNMP 架构为例，MySQL 是 Php 的上游服务，Php 是 Nginx 的上游服务。一般情况下，发生 502 都不是 Nginx 的问题，问题主要集中在上游服务 Php 中，进程数的设置、内存设置、超时设置等都可能会导致 502。
我们可以先看看整个请求流程中，哪里出问题可能会出现 502？
从路径上来看，发生 502 有两大类场景：
 Nginx 服务不可用；负载均衡通过健康检查发现上游服务不可用，会直接返回 502，不会转发请求到后端服务 fpm 异常；Nginx 接收不到上游服务 Php 的返回，会返回 502  回到线上业务现象，只有某个特定的接口出现了 502，只要一访问就会 502，但是其他接口是好的。这样的现象就比较诡异，通常我们碰到的 502 都是整体服务不可用导致或者偶发的不同业务 502，与我们出现的现象都不一样。那么我们如何定位呢？
  从主要路径排查，排查路径</description>
    </item>
    
    <item>
      <title>Golang 中应用 Functional Options 模式</title>
      <link>/posts/golang-%E4%B8%AD%E5%BA%94%E7%94%A8-functional-options/</link>
      <pubDate>Wed, 20 Jul 2022 14:18:00 +0800</pubDate>
      
      <guid>/posts/golang-%E4%B8%AD%E5%BA%94%E7%94%A8-functional-options/</guid>
      <description>Functional Options 是一个函数式编程的应用案例，编程技巧也很好，是目前在go语言中最流行的一种编程模式。在grpc的源码中有大量的应用。
要解决什么问题 配置选项问题 在编程中，我们会经常需要对一个对象进行相关的配置，比如：
type Server struct {  Addr string  Port int  Protocol string  Timeout time.Duration  MaxConns int  TLS *tls.Config } 在这个Server对象中，我们可以看到：
 要有监听的ip地址 addr 和端口号 Port，这两个配置选项是必须的 还有 Protocol、 Timeout、 MaxConns 字段，这几个字短是不能为空的，但有默认值：协议是tcp，超时时间30秒和最大连结束1024个 还有 TLS 这个是安全链接，需要配置相关的证书和私钥。这个是可以为空的  所以，针对与上述这样的配置，因为go语言不支持重载函数，所以不得不用不同的函数来应对不同的配置创建Server的函数，如：
func NewDefaultServer(addr string, port int) (*Server, error) {  return &amp;amp;Server{  Addr: addr, Port: port,  Protocol: &amp;#34;tcp&amp;#34;, Timeout: 30*time.Second, MaxConns: 1024  TLS: nil  }, nil }  func NewTLSServer(addr string, port int, tlsConf *tls.</description>
    </item>
    
  </channel>
</rss>
